name: Continuous Integration

on: [push, pull_request]

jobs:
  unix-build:
    name: Unix Build
    strategy:
      matrix:
        os: [ubuntu-18.04, macOS-latest]
        python-version: [3.7, 3.8]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Environment Variables
      run: |
        CI_PYTHON_VERSION=${{ matrix.python-version }}
        CI_PACKAGE=opencolorio_config_aces
        CI_SHA=${{ github.sha }}
        CI_FLAKE8_EXCLUDED=aces-dev
        COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }}
        echo ::set-env name=CI_PYTHON_VERSION::$CI_PYTHON_VERSION
        echo ::set-env name=CI_PACKAGE::$CI_PACKAGE
        echo ::set-env name=CI_SHA::$CI_SHA
        echo ::set-env name=COVERALLS_REPO_TOKEN::$COVERALLS_REPO_TOKEN
        echo ::set-env name=CI_FLAKE8_EXCLUDED::$CI_FLAKE8_EXCLUDED
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: |
        curl -L https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py -o get-poetry.py
        python get-poetry.py --preview --version 1.0.0b3
        PATH=$HOME/.poetry/bin:$PATH
        echo ::set-env name=PATH::$PATH
    - name: Install Package Dependencies
      run: |
        poetry install
        source $(poetry env info -p)/bin/activate
    - name: Lint with flake8
      run: |
        source $(poetry env info -p)/bin/activate
        flake8 $CI_PACKAGE --count --show-source --statistics --exclude=$CI_FLAKE8_EXCLUDED
    - name: Test with nosetests
      run: |
        source $(poetry env info -p)/bin/activate
        python -W ignore -m nose -q -v --with-doctest --doctest-options=+ELLIPSIS --with-coverage --cover-package=$CI_PACKAGE $CI_PACKAGE
#    - name: Upload Coverage to coveralls.io
#      run: |
#        source $(poetry env info -p)/bin/activate
#        if [ -z "$COVERALLS_REPO_TOKEN" ]; then echo \"COVERALLS_REPO_TOKEN\" secret is undefined!; else coveralls; fi
  windows-build:
    name: Windows Build
    strategy:
      matrix:
        os: [windows-2019]
        python-version: [3.7, 3.8]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
    - name: Environment Variables
      run: |
        set CI_PYTHON_VERSION=${{ matrix.python-version }}
        set CI_PACKAGE=opencolorio_config_aces
        set CI_SHA=${{ github.sha }}
        set CI_FLAKE8_EXCLUDED=aces-dev
        set COVERALLS_REPO_TOKEN=${{ secrets.COVERALLS_REPO_TOKEN }}
        echo ::set-env name=CI_PYTHON_VERSION::%CI_PYTHON_VERSION%
        echo ::set-env name=CI_PACKAGE::%CI_PACKAGE%
        echo ::set-env name=CI_SHA::%CI_SHA%
        echo ::set-env name=COVERALLS_REPO_TOKEN::%COVERALLS_REPO_TOKEN%
        echo ::set-env name=CI_FLAKE8_EXCLUDED::%CI_FLAKE8_EXCLUDED%
      shell: cmd
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: |
        curl -L https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py -o get-poetry.py
        python get-poetry.py --preview --version 1.0.0b3
        set PATH=%USERPROFILE%\.poetry\bin;%PATH%
        echo ::set-env name=PATH::%PATH%
      shell: cmd
    - name: Install Package Dependencies
      run: |
        call poetry install
        FOR /F %%a IN ('poetry env info -p') DO SET CI_VIRTUAL_ENVIRONMENT=%%a
        echo ::set-env name=CI_VIRTUAL_ENVIRONMENT::%CI_VIRTUAL_ENVIRONMENT%
      shell: cmd
    - name: Lint with flake8
      run: |
        call %CI_VIRTUAL_ENVIRONMENT%\scripts\activate
        flake8 %CI_PACKAGE% --count --show-source --statistics --exclude=%CI_FLAKE8_EXCLUDED%
      shell: cmd
    - name: Test with nosetests
      run: |
        call %CI_VIRTUAL_ENVIRONMENT%\scripts\activate
        python -W ignore -m nose -q -v --with-doctest --doctest-options=+ELLIPSIS --with-coverage --cover-package=%CI_PACKAGE% %CI_PACKAGE%
      shell: cmd
#    - name: Upload Coverage to coveralls.io
#      run: |
#        call %CI_VIRTUAL_ENVIRONMENT%\scripts\activate
#        IF "%COVERALLS_REPO_TOKEN%"=="" (echo "COVERALLS_REPO_TOKEN" secret is undefined!) ELSE (coveralls)
#      shell: cmd
